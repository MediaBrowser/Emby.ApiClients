//
// EntitiesUser.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Class User   */

public struct EntitiesUser: Codable {

    /** From now on all user paths will be Id\\-based. This is for backwards compatibility. */
    public var usesIdForConfigurationPath: Bool?
    /** The password. */
    public var password: String?
    public var easyPassword: String?
    public var salt: String?
    public var connectUserName: String?
    public var connectUserId: String?
    public var connectLinkType: ConnectUserLinkType?
    public var connectAccessKey: String?
    public var imageInfos: [EntitiesItemImageInfo]?
    /** The name. */
    public var name: String?
    /** The last login date. */
    public var lastLoginDate: Date?
    /** The last activity date. */
    public var lastActivityDate: Date?
    public var playedPercentage: Double?
    public var recursiveChildCountEqualsChildCount: Bool?
    /** Internal use only */
    public var originalParsedName: String?
    /** Internal use only */
    public var isNameParsedFromFolder: Bool?
    /** The date created. */
    public var dateCreated: Date?
    public var importedCollections: [LinkedItemInfo]?
    public var resolvedPresentationUniqueKey: String?

    public init(usesIdForConfigurationPath: Bool? = nil, password: String? = nil, easyPassword: String? = nil, salt: String? = nil, connectUserName: String? = nil, connectUserId: String? = nil, connectLinkType: ConnectUserLinkType? = nil, connectAccessKey: String? = nil, imageInfos: [EntitiesItemImageInfo]? = nil, name: String? = nil, lastLoginDate: Date? = nil, lastActivityDate: Date? = nil, playedPercentage: Double? = nil, recursiveChildCountEqualsChildCount: Bool? = nil, originalParsedName: String? = nil, isNameParsedFromFolder: Bool? = nil, dateCreated: Date? = nil, importedCollections: [LinkedItemInfo]? = nil, resolvedPresentationUniqueKey: String? = nil) {
        self.usesIdForConfigurationPath = usesIdForConfigurationPath
        self.password = password
        self.easyPassword = easyPassword
        self.salt = salt
        self.connectUserName = connectUserName
        self.connectUserId = connectUserId
        self.connectLinkType = connectLinkType
        self.connectAccessKey = connectAccessKey
        self.imageInfos = imageInfos
        self.name = name
        self.lastLoginDate = lastLoginDate
        self.lastActivityDate = lastActivityDate
        self.playedPercentage = playedPercentage
        self.recursiveChildCountEqualsChildCount = recursiveChildCountEqualsChildCount
        self.originalParsedName = originalParsedName
        self.isNameParsedFromFolder = isNameParsedFromFolder
        self.dateCreated = dateCreated
        self.importedCollections = importedCollections
        self.resolvedPresentationUniqueKey = resolvedPresentationUniqueKey
    }

    public enum CodingKeys: String, CodingKey { 
        case usesIdForConfigurationPath = "UsesIdForConfigurationPath"
        case password = "Password"
        case easyPassword = "EasyPassword"
        case salt = "Salt"
        case connectUserName = "ConnectUserName"
        case connectUserId = "ConnectUserId"
        case connectLinkType = "ConnectLinkType"
        case connectAccessKey = "ConnectAccessKey"
        case imageInfos = "ImageInfos"
        case name = "Name"
        case lastLoginDate = "LastLoginDate"
        case lastActivityDate = "LastActivityDate"
        case playedPercentage = "PlayedPercentage"
        case recursiveChildCountEqualsChildCount = "RecursiveChildCountEqualsChildCount"
        case originalParsedName = "OriginalParsedName"
        case isNameParsedFromFolder = "IsNameParsedFromFolder"
        case dateCreated = "DateCreated"
        case importedCollections = "ImportedCollections"
        case resolvedPresentationUniqueKey = "ResolvedPresentationUniqueKey"
    }

}
