//
// PartyServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PartyServiceAPI {
    /**
     Gets a list of active parties

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getParties(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPartiesWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets a list of active parties
     - GET /Parties

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func getPartiesWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Parties"
        let URLString = EmbyClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = EmbyClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets info about the session's current party

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPartiesInfo(completion: @escaping ((_ data: PartyInfoResult?,_ error: Error?) -> Void)) {
        getPartiesInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets info about the session's current party
     - GET /Parties/Info

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "PartyInfo" : {
    "Id" : "Id",
    "Name" : "Name"
  }
}}]

     - returns: RequestBuilder<PartyInfoResult> 
     */
    open class func getPartiesInfoWithRequestBuilder() -> RequestBuilder<PartyInfoResult> {
        let path = "/Parties/Info"
        let URLString = EmbyClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PartyInfoResult>.Type = EmbyClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a party

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postParties(completion: @escaping ((_ data: PartyInfoResult?,_ error: Error?) -> Void)) {
        postPartiesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a party
     - POST /Parties

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "PartyInfo" : {
    "Id" : "Id",
    "Name" : "Name"
  }
}}]

     - returns: RequestBuilder<PartyInfoResult> 
     */
    open class func postPartiesWithRequestBuilder() -> RequestBuilder<PartyInfoResult> {
        let path = "/Parties"
        let URLString = EmbyClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PartyInfoResult>.Type = EmbyClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Joins a party

     - parameter _id: (path) Name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPartiesByIdJoin(_id: String, completion: @escaping ((_ data: PartyInfoResult?,_ error: Error?) -> Void)) {
        postPartiesByIdJoinWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Joins a party
     - POST /Parties/{Id}/Join

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "PartyInfo" : {
    "Id" : "Id",
    "Name" : "Name"
  }
}}]
     - parameter _id: (path) Name 

     - returns: RequestBuilder<PartyInfoResult> 
     */
    open class func postPartiesByIdJoinWithRequestBuilder(_id: String) -> RequestBuilder<PartyInfoResult> {
        var path = "/Parties/{Id}/Join"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = EmbyClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PartyInfoResult>.Type = EmbyClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Leaves a party

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPartiesLeave(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPartiesLeaveWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Leaves a party
     - POST /Parties/Leave

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func postPartiesLeaveWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Parties/Leave"
        let URLString = EmbyClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = EmbyClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
