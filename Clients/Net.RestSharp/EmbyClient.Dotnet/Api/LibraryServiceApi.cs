/*
 * EmbyClient.Dotnet
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EmbyClient.Dotnet.Client;
using EmbyClient.Dotnet.Model;

namespace EmbyClient.Dotnet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILibraryServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns></returns>
        void DeleteItems (string ids);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemsWithHttpInfo (string ids);
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        void DeleteItemsById (string id);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemsByIdWithHttpInfo (string id);
        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetAlbumsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetAlbumsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetArtistsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetArtistsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds games similar to a given game.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetGamesByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds games similar to a given game.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetGamesByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Gets all parents of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>List&lt;BaseItemDto&gt;</returns>
        List<BaseItemDto> GetItemsByIdAncestors (string userId, string id);

        /// <summary>
        /// Gets all parents of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of List&lt;BaseItemDto&gt;</returns>
        ApiResponse<List<BaseItemDto>> GetItemsByIdAncestorsWithHttpInfo (string userId, string id);
        /// <summary>
        /// Gets critic reviews for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetItemsByIdCriticreviews (string id, int? startIndex, int? limit);

        /// <summary>
        /// Gets critic reviews for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetItemsByIdCriticreviewsWithHttpInfo (string id, int? startIndex, int? limit);
        /// <summary>
        /// Gets delete info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>LibraryDeleteInfo</returns>
        LibraryDeleteInfo GetItemsByIdDeleteinfo (string id);

        /// <summary>
        /// Gets delete info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of LibraryDeleteInfo</returns>
        ApiResponse<LibraryDeleteInfo> GetItemsByIdDeleteinfoWithHttpInfo (string id);
        /// <summary>
        /// Downloads item media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        void GetItemsByIdDownload (string id);

        /// <summary>
        /// Downloads item media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemsByIdDownloadWithHttpInfo (string id);
        /// <summary>
        /// Gets the original file of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        void GetItemsByIdFile (string id);

        /// <summary>
        /// Gets the original file of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemsByIdFileWithHttpInfo (string id);
        /// <summary>
        /// Gets similar items
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetItemsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Gets similar items
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetItemsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Gets theme videos and songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>AllThemeMediaResult</returns>
        AllThemeMediaResult GetItemsByIdThememedia (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);

        /// <summary>
        /// Gets theme videos and songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ApiResponse of AllThemeMediaResult</returns>
        ApiResponse<AllThemeMediaResult> GetItemsByIdThememediaWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);
        /// <summary>
        /// Gets theme songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ThemeMediaResult</returns>
        ThemeMediaResult GetItemsByIdThemesongs (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);

        /// <summary>
        /// Gets theme songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        ApiResponse<ThemeMediaResult> GetItemsByIdThemesongsWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);
        /// <summary>
        /// Gets theme videos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ThemeMediaResult</returns>
        ThemeMediaResult GetItemsByIdThemevideos (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);

        /// <summary>
        /// Gets theme videos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        ApiResponse<ThemeMediaResult> GetItemsByIdThemevideosWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>ItemCounts</returns>
        ItemCounts GetItemsCounts (string userId, bool? isFavorite);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>ApiResponse of ItemCounts</returns>
        ApiResponse<ItemCounts> GetItemsCountsWithHttpInfo (string userId, bool? isFavorite);
        /// <summary>
        /// Gets info to debug intros
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PersistenceIntroDebugInfo&gt;</returns>
        List<PersistenceIntroDebugInfo> GetItemsIntros ();

        /// <summary>
        /// Gets info to debug intros
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PersistenceIntroDebugInfo&gt;</returns>
        ApiResponse<List<PersistenceIntroDebugInfo>> GetItemsIntrosWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LibraryOptionsResult</returns>
        LibraryOptionsResult GetLibrariesAvailableoptions ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LibraryOptionsResult</returns>
        ApiResponse<LibraryOptionsResult> GetLibrariesAvailableoptionsWithHttpInfo ();
        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetLibraryMediafolders (bool? isHidden);

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetLibraryMediafoldersWithHttpInfo (bool? isHidden);
        /// <summary>
        /// Gets a list of physical paths from virtual folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetLibraryPhysicalpaths ();

        /// <summary>
        /// Gets a list of physical paths from virtual folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetLibraryPhysicalpathsWithHttpInfo ();
        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LibraryMediaFolder&gt;</returns>
        List<LibraryMediaFolder> GetLibrarySelectablemediafolders ();

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LibraryMediaFolder&gt;</returns>
        ApiResponse<List<LibraryMediaFolder>> GetLibrarySelectablemediafoldersWithHttpInfo ();
        /// <summary>
        /// Finds movies and trailers similar to a given movie.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetMoviesByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds movies and trailers similar to a given movie.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetMoviesByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds tv shows similar to a given one.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetShowsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds tv shows similar to a given one.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetShowsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds movies and trailers similar to a given trailer.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        QueryResultBaseItemDto GetTrailersByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds movies and trailers similar to a given trailer.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        ApiResponse<QueryResultBaseItemDto> GetTrailersByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        void PostItemsByIdDelete (string id);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns></returns>
        void PostItemsDelete (string ids);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsDeleteWithHttpInfo (string ids);
        /// <summary>
        /// Reports that new movies have been added by an external source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns></returns>
        void PostLibraryMediaUpdated (LibraryPostUpdatedMedia body);

        /// <summary>
        /// Reports that new movies have been added by an external source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLibraryMediaUpdatedWithHttpInfo (LibraryPostUpdatedMedia body);
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostLibraryMoviesAdded ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLibraryMoviesAddedWithHttpInfo ();
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostLibraryMoviesUpdated ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLibraryMoviesUpdatedWithHttpInfo ();
        /// <summary>
        /// Starts a library scan
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostLibraryRefresh ();

        /// <summary>
        /// Starts a library scan
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLibraryRefreshWithHttpInfo ();
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostLibrarySeriesAdded ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLibrarySeriesAddedWithHttpInfo ();
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostLibrarySeriesUpdated ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLibrarySeriesUpdatedWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemsAsync (string ids);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsAsyncWithHttpInfo (string ids);
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemsByIdAsync (string id);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetAlbumsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetAlbumsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetArtistsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetArtistsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds games similar to a given game.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetGamesByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds games similar to a given game.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetGamesByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Gets all parents of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of List&lt;BaseItemDto&gt;</returns>
        System.Threading.Tasks.Task<List<BaseItemDto>> GetItemsByIdAncestorsAsync (string userId, string id);

        /// <summary>
        /// Gets all parents of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BaseItemDto>>> GetItemsByIdAncestorsAsyncWithHttpInfo (string userId, string id);
        /// <summary>
        /// Gets critic reviews for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetItemsByIdCriticreviewsAsync (string id, int? startIndex, int? limit);

        /// <summary>
        /// Gets critic reviews for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetItemsByIdCriticreviewsAsyncWithHttpInfo (string id, int? startIndex, int? limit);
        /// <summary>
        /// Gets delete info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of LibraryDeleteInfo</returns>
        System.Threading.Tasks.Task<LibraryDeleteInfo> GetItemsByIdDeleteinfoAsync (string id);

        /// <summary>
        /// Gets delete info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (LibraryDeleteInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryDeleteInfo>> GetItemsByIdDeleteinfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Downloads item media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemsByIdDownloadAsync (string id);

        /// <summary>
        /// Downloads item media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdDownloadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the original file of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemsByIdFileAsync (string id);

        /// <summary>
        /// Gets the original file of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdFileAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets similar items
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetItemsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Gets similar items
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetItemsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Gets theme videos and songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of AllThemeMediaResult</returns>
        System.Threading.Tasks.Task<AllThemeMediaResult> GetItemsByIdThememediaAsync (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);

        /// <summary>
        /// Gets theme videos and songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ApiResponse (AllThemeMediaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllThemeMediaResult>> GetItemsByIdThememediaAsyncWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);
        /// <summary>
        /// Gets theme songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ThemeMediaResult</returns>
        System.Threading.Tasks.Task<ThemeMediaResult> GetItemsByIdThemesongsAsync (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);

        /// <summary>
        /// Gets theme songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetItemsByIdThemesongsAsyncWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);
        /// <summary>
        /// Gets theme videos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ThemeMediaResult</returns>
        System.Threading.Tasks.Task<ThemeMediaResult> GetItemsByIdThemevideosAsync (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);

        /// <summary>
        /// Gets theme videos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetItemsByIdThemevideosAsyncWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>Task of ItemCounts</returns>
        System.Threading.Tasks.Task<ItemCounts> GetItemsCountsAsync (string userId, bool? isFavorite);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>Task of ApiResponse (ItemCounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemCounts>> GetItemsCountsAsyncWithHttpInfo (string userId, bool? isFavorite);
        /// <summary>
        /// Gets info to debug intros
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PersistenceIntroDebugInfo&gt;</returns>
        System.Threading.Tasks.Task<List<PersistenceIntroDebugInfo>> GetItemsIntrosAsync ();

        /// <summary>
        /// Gets info to debug intros
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PersistenceIntroDebugInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersistenceIntroDebugInfo>>> GetItemsIntrosAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LibraryOptionsResult</returns>
        System.Threading.Tasks.Task<LibraryOptionsResult> GetLibrariesAvailableoptionsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LibraryOptionsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryOptionsResult>> GetLibrariesAvailableoptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetLibraryMediafoldersAsync (bool? isHidden);

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetLibraryMediafoldersAsyncWithHttpInfo (bool? isHidden);
        /// <summary>
        /// Gets a list of physical paths from virtual folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetLibraryPhysicalpathsAsync ();

        /// <summary>
        /// Gets a list of physical paths from virtual folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetLibraryPhysicalpathsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LibraryMediaFolder&gt;</returns>
        System.Threading.Tasks.Task<List<LibraryMediaFolder>> GetLibrarySelectablemediafoldersAsync ();

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LibraryMediaFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LibraryMediaFolder>>> GetLibrarySelectablemediafoldersAsyncWithHttpInfo ();
        /// <summary>
        /// Finds movies and trailers similar to a given movie.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetMoviesByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds movies and trailers similar to a given movie.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetMoviesByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds tv shows similar to a given one.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetShowsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds tv shows similar to a given one.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetShowsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Finds movies and trailers similar to a given trailer.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        System.Threading.Tasks.Task<QueryResultBaseItemDto> GetTrailersByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);

        /// <summary>
        /// Finds movies and trailers similar to a given trailer.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetTrailersByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan);
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdDeleteAsync (string id);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsDeleteAsync (string ids);

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsDeleteAsyncWithHttpInfo (string ids);
        /// <summary>
        /// Reports that new movies have been added by an external source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLibraryMediaUpdatedAsync (LibraryPostUpdatedMedia body);

        /// <summary>
        /// Reports that new movies have been added by an external source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryMediaUpdatedAsyncWithHttpInfo (LibraryPostUpdatedMedia body);
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLibraryMoviesAddedAsync ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryMoviesAddedAsyncWithHttpInfo ();
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLibraryMoviesUpdatedAsync ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryMoviesUpdatedAsyncWithHttpInfo ();
        /// <summary>
        /// Starts a library scan
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLibraryRefreshAsync ();

        /// <summary>
        /// Starts a library scan
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryRefreshAsyncWithHttpInfo ();
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLibrarySeriesAddedAsync ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLibrarySeriesAddedAsyncWithHttpInfo ();
        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLibrarySeriesUpdatedAsync ();

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLibrarySeriesUpdatedAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LibraryServiceApi : ILibraryServiceApi
    {
        private EmbyClient.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryServiceApi(String basePath)
        {
            this.Configuration = new EmbyClient.Dotnet.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EmbyClient.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public LibraryServiceApi()
        {
            this.Configuration = EmbyClient.Dotnet.Client.Configuration.Default;

            ExceptionFactory = EmbyClient.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibraryServiceApi(EmbyClient.Dotnet.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EmbyClient.Dotnet.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EmbyClient.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EmbyClient.Dotnet.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EmbyClient.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns></returns>
        public void DeleteItems (string ids)
        {
             DeleteItemsWithHttpInfo(ids);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemsWithHttpInfo (string ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LibraryServiceApi->DeleteItems");

            var localVarPath = "/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemsAsync (string ids)
        {
             await DeleteItemsAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsAsyncWithHttpInfo (string ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LibraryServiceApi->DeleteItems");

            var localVarPath = "/Items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        public void DeleteItemsById (string id)
        {
             DeleteItemsByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemsByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->DeleteItemsById");

            var localVarPath = "/Items/{Id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemsByIdAsync (string id)
        {
             await DeleteItemsByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->DeleteItemsById");

            var localVarPath = "/Items/{Id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetAlbumsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetAlbumsByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetAlbumsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetAlbumsByIdSimilar");

            var localVarPath = "/Albums/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlbumsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetAlbumsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetAlbumsByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetAlbumsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetAlbumsByIdSimilar");

            var localVarPath = "/Albums/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlbumsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetArtistsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetArtistsByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetArtistsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetArtistsByIdSimilar");

            var localVarPath = "/Artists/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetArtistsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetArtistsByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds albums similar to a given album. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetArtistsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetArtistsByIdSimilar");

            var localVarPath = "/Artists/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds games similar to a given game. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetGamesByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetGamesByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds games similar to a given game. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetGamesByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetGamesByIdSimilar");

            var localVarPath = "/Games/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamesByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds games similar to a given game. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetGamesByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetGamesByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds games similar to a given game. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetGamesByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetGamesByIdSimilar");

            var localVarPath = "/Games/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamesByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets all parents of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>List&lt;BaseItemDto&gt;</returns>
        public List<BaseItemDto> GetItemsByIdAncestors (string userId, string id)
        {
             ApiResponse<List<BaseItemDto>> localVarResponse = GetItemsByIdAncestorsWithHttpInfo(userId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all parents of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of List&lt;BaseItemDto&gt;</returns>
        public ApiResponse< List<BaseItemDto> > GetItemsByIdAncestorsWithHttpInfo (string userId, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdAncestors");

            var localVarPath = "/Items/{Id}/Ancestors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdAncestors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseItemDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BaseItemDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseItemDto>)));
        }

        /// <summary>
        /// Gets all parents of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of List&lt;BaseItemDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BaseItemDto>> GetItemsByIdAncestorsAsync (string userId, string id)
        {
             ApiResponse<List<BaseItemDto>> localVarResponse = await GetItemsByIdAncestorsAsyncWithHttpInfo(userId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all parents of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BaseItemDto>>> GetItemsByIdAncestorsAsyncWithHttpInfo (string userId, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdAncestors");

            var localVarPath = "/Items/{Id}/Ancestors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdAncestors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseItemDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BaseItemDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseItemDto>)));
        }

        /// <summary>
        /// Gets critic reviews for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetItemsByIdCriticreviews (string id, int? startIndex, int? limit)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetItemsByIdCriticreviewsWithHttpInfo(id, startIndex, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets critic reviews for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetItemsByIdCriticreviewsWithHttpInfo (string id, int? startIndex, int? limit)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdCriticreviews");

            var localVarPath = "/Items/{Id}/CriticReviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdCriticreviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets critic reviews for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetItemsByIdCriticreviewsAsync (string id, int? startIndex, int? limit)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetItemsByIdCriticreviewsAsyncWithHttpInfo(id, startIndex, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets critic reviews for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetItemsByIdCriticreviewsAsyncWithHttpInfo (string id, int? startIndex, int? limit)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdCriticreviews");

            var localVarPath = "/Items/{Id}/CriticReviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdCriticreviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets delete info for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>LibraryDeleteInfo</returns>
        public LibraryDeleteInfo GetItemsByIdDeleteinfo (string id)
        {
             ApiResponse<LibraryDeleteInfo> localVarResponse = GetItemsByIdDeleteinfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets delete info for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of LibraryDeleteInfo</returns>
        public ApiResponse< LibraryDeleteInfo > GetItemsByIdDeleteinfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdDeleteinfo");

            var localVarPath = "/Items/{Id}/DeleteInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdDeleteinfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryDeleteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LibraryDeleteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryDeleteInfo)));
        }

        /// <summary>
        /// Gets delete info for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of LibraryDeleteInfo</returns>
        public async System.Threading.Tasks.Task<LibraryDeleteInfo> GetItemsByIdDeleteinfoAsync (string id)
        {
             ApiResponse<LibraryDeleteInfo> localVarResponse = await GetItemsByIdDeleteinfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets delete info for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (LibraryDeleteInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryDeleteInfo>> GetItemsByIdDeleteinfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdDeleteinfo");

            var localVarPath = "/Items/{Id}/DeleteInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdDeleteinfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryDeleteInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LibraryDeleteInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryDeleteInfo)));
        }

        /// <summary>
        /// Downloads item media Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        public void GetItemsByIdDownload (string id)
        {
             GetItemsByIdDownloadWithHttpInfo(id);
        }

        /// <summary>
        /// Downloads item media Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemsByIdDownloadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdDownload");

            var localVarPath = "/Items/{Id}/Download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Downloads item media Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemsByIdDownloadAsync (string id)
        {
             await GetItemsByIdDownloadAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Downloads item media Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdDownloadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdDownload");

            var localVarPath = "/Items/{Id}/Download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets the original file of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        public void GetItemsByIdFile (string id)
        {
             GetItemsByIdFileWithHttpInfo(id);
        }

        /// <summary>
        /// Gets the original file of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemsByIdFileWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdFile");

            var localVarPath = "/Items/{Id}/File";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets the original file of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemsByIdFileAsync (string id)
        {
             await GetItemsByIdFileAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Gets the original file of an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdFileAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdFile");

            var localVarPath = "/Items/{Id}/File";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets similar items Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetItemsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetItemsByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets similar items Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetItemsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdSimilar");

            var localVarPath = "/Items/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets similar items Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetItemsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetItemsByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets similar items Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetItemsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdSimilar");

            var localVarPath = "/Items/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets theme videos and songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>AllThemeMediaResult</returns>
        public AllThemeMediaResult GetItemsByIdThememedia (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
             ApiResponse<AllThemeMediaResult> localVarResponse = GetItemsByIdThememediaWithHttpInfo(userId, id, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets theme videos and songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ApiResponse of AllThemeMediaResult</returns>
        public ApiResponse< AllThemeMediaResult > GetItemsByIdThememediaWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdThememedia");

            var localVarPath = "/Items/{Id}/ThemeMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InheritFromParent", inheritFromParent)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdThememedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllThemeMediaResult)));
        }

        /// <summary>
        /// Gets theme videos and songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of AllThemeMediaResult</returns>
        public async System.Threading.Tasks.Task<AllThemeMediaResult> GetItemsByIdThememediaAsync (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
             ApiResponse<AllThemeMediaResult> localVarResponse = await GetItemsByIdThememediaAsyncWithHttpInfo(userId, id, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets theme videos and songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ApiResponse (AllThemeMediaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllThemeMediaResult>> GetItemsByIdThememediaAsyncWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdThememedia");

            var localVarPath = "/Items/{Id}/ThemeMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InheritFromParent", inheritFromParent)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdThememedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllThemeMediaResult)));
        }

        /// <summary>
        /// Gets theme songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ThemeMediaResult</returns>
        public ThemeMediaResult GetItemsByIdThemesongs (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
             ApiResponse<ThemeMediaResult> localVarResponse = GetItemsByIdThemesongsWithHttpInfo(userId, id, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets theme songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        public ApiResponse< ThemeMediaResult > GetItemsByIdThemesongsWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdThemesongs");

            var localVarPath = "/Items/{Id}/ThemeSongs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InheritFromParent", inheritFromParent)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdThemesongs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Gets theme songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ThemeMediaResult</returns>
        public async System.Threading.Tasks.Task<ThemeMediaResult> GetItemsByIdThemesongsAsync (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
             ApiResponse<ThemeMediaResult> localVarResponse = await GetItemsByIdThemesongsAsyncWithHttpInfo(userId, id, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets theme songs for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetItemsByIdThemesongsAsyncWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdThemesongs");

            var localVarPath = "/Items/{Id}/ThemeSongs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InheritFromParent", inheritFromParent)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdThemesongs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Gets theme videos for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ThemeMediaResult</returns>
        public ThemeMediaResult GetItemsByIdThemevideos (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
             ApiResponse<ThemeMediaResult> localVarResponse = GetItemsByIdThemevideosWithHttpInfo(userId, id, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets theme videos for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>ApiResponse of ThemeMediaResult</returns>
        public ApiResponse< ThemeMediaResult > GetItemsByIdThemevideosWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdThemevideos");

            var localVarPath = "/Items/{Id}/ThemeVideos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InheritFromParent", inheritFromParent)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdThemevideos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        /// Gets theme videos for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ThemeMediaResult</returns>
        public async System.Threading.Tasks.Task<ThemeMediaResult> GetItemsByIdThemevideosAsync (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
             ApiResponse<ThemeMediaResult> localVarResponse = await GetItemsByIdThemevideosAsyncWithHttpInfo(userId, id, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets theme videos for an item Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="inheritFromParent">Determines whether or not parent items should be searched for theme media. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <returns>Task of ApiResponse (ThemeMediaResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeMediaResult>> GetItemsByIdThemevideosAsyncWithHttpInfo (string userId, string id, bool? inheritFromParent, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData, string fields)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetItemsByIdThemevideos");

            var localVarPath = "/Items/{Id}/ThemeVideos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (inheritFromParent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "InheritFromParent", inheritFromParent)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdThemevideos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeMediaResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThemeMediaResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeMediaResult)));
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>ItemCounts</returns>
        public ItemCounts GetItemsCounts (string userId, bool? isFavorite)
        {
             ApiResponse<ItemCounts> localVarResponse = GetItemsCountsWithHttpInfo(userId, isFavorite);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>ApiResponse of ItemCounts</returns>
        public ApiResponse< ItemCounts > GetItemsCountsWithHttpInfo (string userId, bool? isFavorite)
        {

            var localVarPath = "/Items/Counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemCounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCounts)));
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>Task of ItemCounts</returns>
        public async System.Threading.Tasks.Task<ItemCounts> GetItemsCountsAsync (string userId, bool? isFavorite)
        {
             ApiResponse<ItemCounts> localVarResponse = await GetItemsCountsAsyncWithHttpInfo(userId, isFavorite);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Optional. Get counts from a specific user&#x27;s library. (optional)</param>
        /// <param name="isFavorite">Optional. Get counts of favorite items (optional)</param>
        /// <returns>Task of ApiResponse (ItemCounts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemCounts>> GetItemsCountsAsyncWithHttpInfo (string userId, bool? isFavorite)
        {

            var localVarPath = "/Items/Counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemCounts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ItemCounts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemCounts)));
        }

        /// <summary>
        /// Gets info to debug intros Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PersistenceIntroDebugInfo&gt;</returns>
        public List<PersistenceIntroDebugInfo> GetItemsIntros ()
        {
             ApiResponse<List<PersistenceIntroDebugInfo>> localVarResponse = GetItemsIntrosWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets info to debug intros Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PersistenceIntroDebugInfo&gt;</returns>
        public ApiResponse< List<PersistenceIntroDebugInfo> > GetItemsIntrosWithHttpInfo ()
        {

            var localVarPath = "/Items/Intros";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsIntros", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersistenceIntroDebugInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PersistenceIntroDebugInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersistenceIntroDebugInfo>)));
        }

        /// <summary>
        /// Gets info to debug intros Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PersistenceIntroDebugInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersistenceIntroDebugInfo>> GetItemsIntrosAsync ()
        {
             ApiResponse<List<PersistenceIntroDebugInfo>> localVarResponse = await GetItemsIntrosAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets info to debug intros Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PersistenceIntroDebugInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PersistenceIntroDebugInfo>>> GetItemsIntrosAsyncWithHttpInfo ()
        {

            var localVarPath = "/Items/Intros";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsIntros", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersistenceIntroDebugInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PersistenceIntroDebugInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersistenceIntroDebugInfo>)));
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LibraryOptionsResult</returns>
        public LibraryOptionsResult GetLibrariesAvailableoptions ()
        {
             ApiResponse<LibraryOptionsResult> localVarResponse = GetLibrariesAvailableoptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LibraryOptionsResult</returns>
        public ApiResponse< LibraryOptionsResult > GetLibrariesAvailableoptionsWithHttpInfo ()
        {

            var localVarPath = "/Libraries/AvailableOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibrariesAvailableoptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryOptionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LibraryOptionsResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryOptionsResult)));
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LibraryOptionsResult</returns>
        public async System.Threading.Tasks.Task<LibraryOptionsResult> GetLibrariesAvailableoptionsAsync ()
        {
             ApiResponse<LibraryOptionsResult> localVarResponse = await GetLibrariesAvailableoptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LibraryOptionsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LibraryOptionsResult>> GetLibrariesAvailableoptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/Libraries/AvailableOptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibrariesAvailableoptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LibraryOptionsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LibraryOptionsResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LibraryOptionsResult)));
        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetLibraryMediafolders (bool? isHidden)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetLibraryMediafoldersWithHttpInfo(isHidden);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetLibraryMediafoldersWithHttpInfo (bool? isHidden)
        {

            var localVarPath = "/Library/MediaFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHidden", isHidden)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryMediafolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetLibraryMediafoldersAsync (bool? isHidden)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetLibraryMediafoldersAsyncWithHttpInfo(isHidden);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHidden">Optional. Filter by folders that are marked hidden, or not. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetLibraryMediafoldersAsyncWithHttpInfo (bool? isHidden)
        {

            var localVarPath = "/Library/MediaFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isHidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHidden", isHidden)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryMediafolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetLibraryPhysicalpaths ()
        {
             ApiResponse<List<string>> localVarResponse = GetLibraryPhysicalpathsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetLibraryPhysicalpathsWithHttpInfo ()
        {

            var localVarPath = "/Library/PhysicalPaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryPhysicalpaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetLibraryPhysicalpathsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetLibraryPhysicalpathsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of physical paths from virtual folders Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetLibraryPhysicalpathsAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/PhysicalPaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibraryPhysicalpaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LibraryMediaFolder&gt;</returns>
        public List<LibraryMediaFolder> GetLibrarySelectablemediafolders ()
        {
             ApiResponse<List<LibraryMediaFolder>> localVarResponse = GetLibrarySelectablemediafoldersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LibraryMediaFolder&gt;</returns>
        public ApiResponse< List<LibraryMediaFolder> > GetLibrarySelectablemediafoldersWithHttpInfo ()
        {

            var localVarPath = "/Library/SelectableMediaFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibrarySelectablemediafolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LibraryMediaFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LibraryMediaFolder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LibraryMediaFolder>)));
        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LibraryMediaFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<LibraryMediaFolder>> GetLibrarySelectablemediafoldersAsync ()
        {
             ApiResponse<List<LibraryMediaFolder>> localVarResponse = await GetLibrarySelectablemediafoldersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all user media folders. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LibraryMediaFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LibraryMediaFolder>>> GetLibrarySelectablemediafoldersAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/SelectableMediaFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLibrarySelectablemediafolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LibraryMediaFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LibraryMediaFolder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LibraryMediaFolder>)));
        }

        /// <summary>
        /// Finds movies and trailers similar to a given movie. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetMoviesByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetMoviesByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds movies and trailers similar to a given movie. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetMoviesByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetMoviesByIdSimilar");

            var localVarPath = "/Movies/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMoviesByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds movies and trailers similar to a given movie. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetMoviesByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetMoviesByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds movies and trailers similar to a given movie. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetMoviesByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetMoviesByIdSimilar");

            var localVarPath = "/Movies/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMoviesByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds tv shows similar to a given one. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetShowsByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetShowsByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds tv shows similar to a given one. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetShowsByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetShowsByIdSimilar");

            var localVarPath = "/Shows/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShowsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds tv shows similar to a given one. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetShowsByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetShowsByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds tv shows similar to a given one. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetShowsByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetShowsByIdSimilar");

            var localVarPath = "/Shows/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShowsByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds movies and trailers similar to a given trailer. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>QueryResultBaseItemDto</returns>
        public QueryResultBaseItemDto GetTrailersByIdSimilar (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = GetTrailersByIdSimilarWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds movies and trailers similar to a given trailer. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>ApiResponse of QueryResultBaseItemDto</returns>
        public ApiResponse< QueryResultBaseItemDto > GetTrailersByIdSimilarWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetTrailersByIdSimilar");

            var localVarPath = "/Trailers/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrailersByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Finds movies and trailers similar to a given trailer. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of QueryResultBaseItemDto</returns>
        public async System.Threading.Tasks.Task<QueryResultBaseItemDto> GetTrailersByIdSimilarAsync (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
             ApiResponse<QueryResultBaseItemDto> localVarResponse = await GetTrailersByIdSimilarAsyncWithHttpInfo(id, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, isSpecialSeason, adjacentTo, startItemId, minIndexNumber, minStartDate, maxStartDate, minEndDate, maxEndDate, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, isNew, isPremiere, isNewOrPremiere, isRepeat, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, excludeTags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, extendedVideoTypes, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds movies and trailers similar to a given trailer. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="isSpecialSeason">Optional. Filter by special season. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="startItemId">Optional. Skip through the list until a given item is found. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultBaseItemDto>> GetTrailersByIdSimilarAsyncWithHttpInfo (string id, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, bool? isSpecialSeason, string adjacentTo, string startItemId, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->GetTrailersByIdSimilar");

            var localVarPath = "/Trailers/{Id}/Similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (artistType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistType", artistType)); // query parameter
            if (maxOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxOfficialRating", maxOfficialRating)); // query parameter
            if (hasThemeSong != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeSong", hasThemeSong)); // query parameter
            if (hasThemeVideo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasThemeVideo", hasThemeVideo)); // query parameter
            if (hasSubtitles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSubtitles", hasSubtitles)); // query parameter
            if (hasSpecialFeature != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasSpecialFeature", hasSpecialFeature)); // query parameter
            if (hasTrailer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTrailer", hasTrailer)); // query parameter
            if (isSpecialSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSpecialSeason", isSpecialSeason)); // query parameter
            if (adjacentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdjacentTo", adjacentTo)); // query parameter
            if (startItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartItemId", startItemId)); // query parameter
            if (minIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinIndexNumber", minIndexNumber)); // query parameter
            if (minStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinStartDate", minStartDate)); // query parameter
            if (maxStartDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxStartDate", maxStartDate)); // query parameter
            if (minEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinEndDate", minEndDate)); // query parameter
            if (maxEndDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxEndDate", maxEndDate)); // query parameter
            if (minPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPlayers", minPlayers)); // query parameter
            if (maxPlayers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPlayers", maxPlayers)); // query parameter
            if (parentIndexNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentIndexNumber", parentIndexNumber)); // query parameter
            if (hasParentalRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasParentalRating", hasParentalRating)); // query parameter
            if (isHD != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsHD", isHD)); // query parameter
            if (isUnaired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsUnaired", isUnaired)); // query parameter
            if (minCommunityRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCommunityRating", minCommunityRating)); // query parameter
            if (minCriticRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinCriticRating", minCriticRating)); // query parameter
            if (airedDuringSeason != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AiredDuringSeason", airedDuringSeason)); // query parameter
            if (minPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinPremiereDate", minPremiereDate)); // query parameter
            if (minDateLastSaved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSaved", minDateLastSaved)); // query parameter
            if (minDateLastSavedForUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinDateLastSavedForUser", minDateLastSavedForUser)); // query parameter
            if (maxPremiereDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxPremiereDate", maxPremiereDate)); // query parameter
            if (hasOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOverview", hasOverview)); // query parameter
            if (hasImdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasImdbId", hasImdbId)); // query parameter
            if (hasTmdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTmdbId", hasTmdbId)); // query parameter
            if (hasTvdbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasTvdbId", hasTvdbId)); // query parameter
            if (excludeItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemIds", excludeItemIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartIndex", startIndex)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Limit", limit)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Recursive", recursive)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SearchTerm", searchTerm)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortOrder", sortOrder)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentId", parentId)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Fields", fields)); // query parameter
            if (excludeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeItemTypes", excludeItemTypes)); // query parameter
            if (includeItemTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeItemTypes", includeItemTypes)); // query parameter
            if (anyProviderIdEquals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AnyProviderIdEquals", anyProviderIdEquals)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filters", filters)); // query parameter
            if (isFavorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFavorite", isFavorite)); // query parameter
            if (isMovie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsMovie", isMovie)); // query parameter
            if (isSeries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSeries", isSeries)); // query parameter
            if (isFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsFolder", isFolder)); // query parameter
            if (isNews != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNews", isNews)); // query parameter
            if (isKids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsKids", isKids)); // query parameter
            if (isSports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsSports", isSports)); // query parameter
            if (isNew != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNew", isNew)); // query parameter
            if (isPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPremiere", isPremiere)); // query parameter
            if (isNewOrPremiere != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsNewOrPremiere", isNewOrPremiere)); // query parameter
            if (isRepeat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsRepeat", isRepeat)); // query parameter
            if (projectToMedia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ProjectToMedia", projectToMedia)); // query parameter
            if (mediaTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MediaTypes", mediaTypes)); // query parameter
            if (imageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypes", imageTypes)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortBy", sortBy)); // query parameter
            if (isPlayed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlayed", isPlayed)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Genres", genres)); // query parameter
            if (officialRatings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "OfficialRatings", officialRatings)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tags", tags)); // query parameter
            if (excludeTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExcludeTags", excludeTags)); // query parameter
            if (years != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Years", years)); // query parameter
            if (enableImages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImages", enableImages)); // query parameter
            if (enableUserData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableUserData", enableUserData)); // query parameter
            if (imageTypeLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ImageTypeLimit", imageTypeLimit)); // query parameter
            if (enableImageTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageTypes", enableImageTypes)); // query parameter
            if (person != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Person", person)); // query parameter
            if (personIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonIds", personIds)); // query parameter
            if (personTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PersonTypes", personTypes)); // query parameter
            if (studios != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Studios", studios)); // query parameter
            if (studioIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StudioIds", studioIds)); // query parameter
            if (artists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Artists", artists)); // query parameter
            if (artistIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistIds", artistIds)); // query parameter
            if (albums != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Albums", albums)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            if (videoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoTypes", videoTypes)); // query parameter
            if (containers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Containers", containers)); // query parameter
            if (audioCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioCodecs", audioCodecs)); // query parameter
            if (audioLayouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AudioLayouts", audioLayouts)); // query parameter
            if (videoCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "VideoCodecs", videoCodecs)); // query parameter
            if (extendedVideoTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ExtendedVideoTypes", extendedVideoTypes)); // query parameter
            if (subtitleCodecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubtitleCodecs", subtitleCodecs)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Path", path)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "UserId", userId)); // query parameter
            if (minOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MinOfficialRating", minOfficialRating)); // query parameter
            if (isLocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsLocked", isLocked)); // query parameter
            if (isPlaceHolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IsPlaceHolder", isPlaceHolder)); // query parameter
            if (hasOfficialRating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HasOfficialRating", hasOfficialRating)); // query parameter
            if (groupItemsIntoCollections != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupItemsIntoCollections", groupItemsIntoCollections)); // query parameter
            if (is3D != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Is3D", is3D)); // query parameter
            if (seriesStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SeriesStatus", seriesStatus)); // query parameter
            if (nameStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWithOrGreater", nameStartsWithOrGreater)); // query parameter
            if (artistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ArtistStartsWithOrGreater", artistStartsWithOrGreater)); // query parameter
            if (albumArtistStartsWithOrGreater != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AlbumArtistStartsWithOrGreater", albumArtistStartsWithOrGreater)); // query parameter
            if (nameStartsWith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameStartsWith", nameStartsWith)); // query parameter
            if (nameLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NameLessThan", nameLessThan)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrailersByIdSimilar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResultBaseItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QueryResultBaseItemDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResultBaseItemDto)));
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns></returns>
        public void PostItemsByIdDelete (string id)
        {
             PostItemsByIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->PostItemsByIdDelete");

            var localVarPath = "/Items/{Id}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdDeleteAsync (string id)
        {
             await PostItemsByIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LibraryServiceApi->PostItemsByIdDelete");

            var localVarPath = "/Items/{Id}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns></returns>
        public void PostItemsDelete (string ids)
        {
             PostItemsDeleteWithHttpInfo(ids);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsDeleteWithHttpInfo (string ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LibraryServiceApi->PostItemsDelete");

            var localVarPath = "/Items/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsDeleteAsync (string ids)
        {
             await PostItemsDeleteAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// Deletes an item from the library and file system Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsDeleteAsyncWithHttpInfo (string ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling LibraryServiceApi->PostItemsDelete");

            var localVarPath = "/Items/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Ids", ids)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns></returns>
        public void PostLibraryMediaUpdated (LibraryPostUpdatedMedia body)
        {
             PostLibraryMediaUpdatedWithHttpInfo(body);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostLibraryMediaUpdatedWithHttpInfo (LibraryPostUpdatedMedia body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LibraryServiceApi->PostLibraryMediaUpdated");

            var localVarPath = "/Library/Media/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryMediaUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reports that new movies have been added by an external source Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLibraryMediaUpdatedAsync (LibraryPostUpdatedMedia body)
        {
             await PostLibraryMediaUpdatedAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Reports that new movies have been added by an external source Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">PostUpdatedMedia</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryMediaUpdatedAsyncWithHttpInfo (LibraryPostUpdatedMedia body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LibraryServiceApi->PostLibraryMediaUpdated");

            var localVarPath = "/Library/Media/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryMediaUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostLibraryMoviesAdded ()
        {
             PostLibraryMoviesAddedWithHttpInfo();
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostLibraryMoviesAddedWithHttpInfo ()
        {

            var localVarPath = "/Library/Movies/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryMoviesAdded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLibraryMoviesAddedAsync ()
        {
             await PostLibraryMoviesAddedAsyncWithHttpInfo();

        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryMoviesAddedAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/Movies/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryMoviesAdded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostLibraryMoviesUpdated ()
        {
             PostLibraryMoviesUpdatedWithHttpInfo();
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostLibraryMoviesUpdatedWithHttpInfo ()
        {

            var localVarPath = "/Library/Movies/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryMoviesUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLibraryMoviesUpdatedAsync ()
        {
             await PostLibraryMoviesUpdatedAsyncWithHttpInfo();

        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryMoviesUpdatedAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/Movies/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryMoviesUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Starts a library scan Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostLibraryRefresh ()
        {
             PostLibraryRefreshWithHttpInfo();
        }

        /// <summary>
        /// Starts a library scan Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostLibraryRefreshWithHttpInfo ()
        {

            var localVarPath = "/Library/Refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Starts a library scan Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLibraryRefreshAsync ()
        {
             await PostLibraryRefreshAsyncWithHttpInfo();

        }

        /// <summary>
        /// Starts a library scan Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostLibraryRefreshAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/Refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibraryRefresh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostLibrarySeriesAdded ()
        {
             PostLibrarySeriesAddedWithHttpInfo();
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostLibrarySeriesAddedWithHttpInfo ()
        {

            var localVarPath = "/Library/Series/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibrarySeriesAdded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLibrarySeriesAddedAsync ()
        {
             await PostLibrarySeriesAddedAsyncWithHttpInfo();

        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostLibrarySeriesAddedAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/Series/Added";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibrarySeriesAdded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostLibrarySeriesUpdated ()
        {
             PostLibrarySeriesUpdatedWithHttpInfo();
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostLibrarySeriesUpdatedWithHttpInfo ()
        {

            var localVarPath = "/Library/Series/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibrarySeriesUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLibrarySeriesUpdatedAsync ()
        {
             await PostLibrarySeriesUpdatedAsyncWithHttpInfo();

        }

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostLibrarySeriesUpdatedAsyncWithHttpInfo ()
        {

            var localVarPath = "/Library/Series/Updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLibrarySeriesUpdated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
