# coding: utf-8

"""
    Emby Server REST API (BETA)
"""

import pprint
import re  # noqa: F401

import six

class EntitiesUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uses_id_for_configuration_path': 'bool',
        'password': 'str',
        'easy_password': 'str',
        'salt': 'str',
        'connect_user_name': 'str',
        'connect_user_id': 'str',
        'connect_link_type': 'ConnectUserLinkType',
        'connect_access_key': 'str',
        'image_infos': 'list[EntitiesItemImageInfo]',
        'name': 'str',
        'last_login_date': 'datetime',
        'last_activity_date': 'datetime',
        'played_percentage': 'float',
        'recursive_child_count_equals_child_count': 'bool',
        'original_parsed_name': 'str',
        'is_name_parsed_from_folder': 'bool',
        'date_created': 'datetime',
        'imported_collections': 'list[LinkedItemInfo]',
        'resolved_presentation_unique_key': 'str'
    }

    attribute_map = {
        'uses_id_for_configuration_path': 'UsesIdForConfigurationPath',
        'password': 'Password',
        'easy_password': 'EasyPassword',
        'salt': 'Salt',
        'connect_user_name': 'ConnectUserName',
        'connect_user_id': 'ConnectUserId',
        'connect_link_type': 'ConnectLinkType',
        'connect_access_key': 'ConnectAccessKey',
        'image_infos': 'ImageInfos',
        'name': 'Name',
        'last_login_date': 'LastLoginDate',
        'last_activity_date': 'LastActivityDate',
        'played_percentage': 'PlayedPercentage',
        'recursive_child_count_equals_child_count': 'RecursiveChildCountEqualsChildCount',
        'original_parsed_name': 'OriginalParsedName',
        'is_name_parsed_from_folder': 'IsNameParsedFromFolder',
        'date_created': 'DateCreated',
        'imported_collections': 'ImportedCollections',
        'resolved_presentation_unique_key': 'ResolvedPresentationUniqueKey'
    }

    def __init__(self, uses_id_for_configuration_path=None, password=None, easy_password=None, salt=None, connect_user_name=None, connect_user_id=None, connect_link_type=None, connect_access_key=None, image_infos=None, name=None, last_login_date=None, last_activity_date=None, played_percentage=None, recursive_child_count_equals_child_count=None, original_parsed_name=None, is_name_parsed_from_folder=None, date_created=None, imported_collections=None, resolved_presentation_unique_key=None):  # noqa: E501
        """EntitiesUser - a model defined in Swagger"""  # noqa: E501
        self._uses_id_for_configuration_path = None
        self._password = None
        self._easy_password = None
        self._salt = None
        self._connect_user_name = None
        self._connect_user_id = None
        self._connect_link_type = None
        self._connect_access_key = None
        self._image_infos = None
        self._name = None
        self._last_login_date = None
        self._last_activity_date = None
        self._played_percentage = None
        self._recursive_child_count_equals_child_count = None
        self._original_parsed_name = None
        self._is_name_parsed_from_folder = None
        self._date_created = None
        self._imported_collections = None
        self._resolved_presentation_unique_key = None
        self.discriminator = None
        if uses_id_for_configuration_path is not None:
            self.uses_id_for_configuration_path = uses_id_for_configuration_path
        if password is not None:
            self.password = password
        if easy_password is not None:
            self.easy_password = easy_password
        if salt is not None:
            self.salt = salt
        if connect_user_name is not None:
            self.connect_user_name = connect_user_name
        if connect_user_id is not None:
            self.connect_user_id = connect_user_id
        if connect_link_type is not None:
            self.connect_link_type = connect_link_type
        if connect_access_key is not None:
            self.connect_access_key = connect_access_key
        if image_infos is not None:
            self.image_infos = image_infos
        if name is not None:
            self.name = name
        if last_login_date is not None:
            self.last_login_date = last_login_date
        if last_activity_date is not None:
            self.last_activity_date = last_activity_date
        if played_percentage is not None:
            self.played_percentage = played_percentage
        if recursive_child_count_equals_child_count is not None:
            self.recursive_child_count_equals_child_count = recursive_child_count_equals_child_count
        if original_parsed_name is not None:
            self.original_parsed_name = original_parsed_name
        if is_name_parsed_from_folder is not None:
            self.is_name_parsed_from_folder = is_name_parsed_from_folder
        if date_created is not None:
            self.date_created = date_created
        if imported_collections is not None:
            self.imported_collections = imported_collections
        if resolved_presentation_unique_key is not None:
            self.resolved_presentation_unique_key = resolved_presentation_unique_key

    @property
    def uses_id_for_configuration_path(self):
        """Gets the uses_id_for_configuration_path of this EntitiesUser.  # noqa: E501

        From now on all user paths will be Id\\-based. This is for backwards compatibility.  # noqa: E501

        :return: The uses_id_for_configuration_path of this EntitiesUser.  # noqa: E501
        :rtype: bool
        """
        return self._uses_id_for_configuration_path

    @uses_id_for_configuration_path.setter
    def uses_id_for_configuration_path(self, uses_id_for_configuration_path):
        """Sets the uses_id_for_configuration_path of this EntitiesUser.

        From now on all user paths will be Id\\-based. This is for backwards compatibility.  # noqa: E501

        :param uses_id_for_configuration_path: The uses_id_for_configuration_path of this EntitiesUser.  # noqa: E501
        :type: bool
        """

        self._uses_id_for_configuration_path = uses_id_for_configuration_path

    @property
    def password(self):
        """Gets the password of this EntitiesUser.  # noqa: E501

        The password.  # noqa: E501

        :return: The password of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EntitiesUser.

        The password.  # noqa: E501

        :param password: The password of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def easy_password(self):
        """Gets the easy_password of this EntitiesUser.  # noqa: E501


        :return: The easy_password of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._easy_password

    @easy_password.setter
    def easy_password(self, easy_password):
        """Sets the easy_password of this EntitiesUser.


        :param easy_password: The easy_password of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._easy_password = easy_password

    @property
    def salt(self):
        """Gets the salt of this EntitiesUser.  # noqa: E501


        :return: The salt of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this EntitiesUser.


        :param salt: The salt of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._salt = salt

    @property
    def connect_user_name(self):
        """Gets the connect_user_name of this EntitiesUser.  # noqa: E501


        :return: The connect_user_name of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._connect_user_name

    @connect_user_name.setter
    def connect_user_name(self, connect_user_name):
        """Sets the connect_user_name of this EntitiesUser.


        :param connect_user_name: The connect_user_name of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._connect_user_name = connect_user_name

    @property
    def connect_user_id(self):
        """Gets the connect_user_id of this EntitiesUser.  # noqa: E501


        :return: The connect_user_id of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._connect_user_id

    @connect_user_id.setter
    def connect_user_id(self, connect_user_id):
        """Sets the connect_user_id of this EntitiesUser.


        :param connect_user_id: The connect_user_id of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._connect_user_id = connect_user_id

    @property
    def connect_link_type(self):
        """Gets the connect_link_type of this EntitiesUser.  # noqa: E501


        :return: The connect_link_type of this EntitiesUser.  # noqa: E501
        :rtype: ConnectUserLinkType
        """
        return self._connect_link_type

    @connect_link_type.setter
    def connect_link_type(self, connect_link_type):
        """Sets the connect_link_type of this EntitiesUser.


        :param connect_link_type: The connect_link_type of this EntitiesUser.  # noqa: E501
        :type: ConnectUserLinkType
        """

        self._connect_link_type = connect_link_type

    @property
    def connect_access_key(self):
        """Gets the connect_access_key of this EntitiesUser.  # noqa: E501


        :return: The connect_access_key of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._connect_access_key

    @connect_access_key.setter
    def connect_access_key(self, connect_access_key):
        """Sets the connect_access_key of this EntitiesUser.


        :param connect_access_key: The connect_access_key of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._connect_access_key = connect_access_key

    @property
    def image_infos(self):
        """Gets the image_infos of this EntitiesUser.  # noqa: E501


        :return: The image_infos of this EntitiesUser.  # noqa: E501
        :rtype: list[EntitiesItemImageInfo]
        """
        return self._image_infos

    @image_infos.setter
    def image_infos(self, image_infos):
        """Sets the image_infos of this EntitiesUser.


        :param image_infos: The image_infos of this EntitiesUser.  # noqa: E501
        :type: list[EntitiesItemImageInfo]
        """

        self._image_infos = image_infos

    @property
    def name(self):
        """Gets the name of this EntitiesUser.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntitiesUser.

        The name.  # noqa: E501

        :param name: The name of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def last_login_date(self):
        """Gets the last_login_date of this EntitiesUser.  # noqa: E501

        The last login date.  # noqa: E501

        :return: The last_login_date of this EntitiesUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_date

    @last_login_date.setter
    def last_login_date(self, last_login_date):
        """Sets the last_login_date of this EntitiesUser.

        The last login date.  # noqa: E501

        :param last_login_date: The last_login_date of this EntitiesUser.  # noqa: E501
        :type: datetime
        """

        self._last_login_date = last_login_date

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this EntitiesUser.  # noqa: E501

        The last activity date.  # noqa: E501

        :return: The last_activity_date of this EntitiesUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this EntitiesUser.

        The last activity date.  # noqa: E501

        :param last_activity_date: The last_activity_date of this EntitiesUser.  # noqa: E501
        :type: datetime
        """

        self._last_activity_date = last_activity_date

    @property
    def played_percentage(self):
        """Gets the played_percentage of this EntitiesUser.  # noqa: E501


        :return: The played_percentage of this EntitiesUser.  # noqa: E501
        :rtype: float
        """
        return self._played_percentage

    @played_percentage.setter
    def played_percentage(self, played_percentage):
        """Sets the played_percentage of this EntitiesUser.


        :param played_percentage: The played_percentage of this EntitiesUser.  # noqa: E501
        :type: float
        """

        self._played_percentage = played_percentage

    @property
    def recursive_child_count_equals_child_count(self):
        """Gets the recursive_child_count_equals_child_count of this EntitiesUser.  # noqa: E501


        :return: The recursive_child_count_equals_child_count of this EntitiesUser.  # noqa: E501
        :rtype: bool
        """
        return self._recursive_child_count_equals_child_count

    @recursive_child_count_equals_child_count.setter
    def recursive_child_count_equals_child_count(self, recursive_child_count_equals_child_count):
        """Sets the recursive_child_count_equals_child_count of this EntitiesUser.


        :param recursive_child_count_equals_child_count: The recursive_child_count_equals_child_count of this EntitiesUser.  # noqa: E501
        :type: bool
        """

        self._recursive_child_count_equals_child_count = recursive_child_count_equals_child_count

    @property
    def original_parsed_name(self):
        """Gets the original_parsed_name of this EntitiesUser.  # noqa: E501

        Internal use only  # noqa: E501

        :return: The original_parsed_name of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._original_parsed_name

    @original_parsed_name.setter
    def original_parsed_name(self, original_parsed_name):
        """Sets the original_parsed_name of this EntitiesUser.

        Internal use only  # noqa: E501

        :param original_parsed_name: The original_parsed_name of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._original_parsed_name = original_parsed_name

    @property
    def is_name_parsed_from_folder(self):
        """Gets the is_name_parsed_from_folder of this EntitiesUser.  # noqa: E501

        Internal use only  # noqa: E501

        :return: The is_name_parsed_from_folder of this EntitiesUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_name_parsed_from_folder

    @is_name_parsed_from_folder.setter
    def is_name_parsed_from_folder(self, is_name_parsed_from_folder):
        """Sets the is_name_parsed_from_folder of this EntitiesUser.

        Internal use only  # noqa: E501

        :param is_name_parsed_from_folder: The is_name_parsed_from_folder of this EntitiesUser.  # noqa: E501
        :type: bool
        """

        self._is_name_parsed_from_folder = is_name_parsed_from_folder

    @property
    def date_created(self):
        """Gets the date_created of this EntitiesUser.  # noqa: E501

        The date created.  # noqa: E501

        :return: The date_created of this EntitiesUser.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EntitiesUser.

        The date created.  # noqa: E501

        :param date_created: The date_created of this EntitiesUser.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def imported_collections(self):
        """Gets the imported_collections of this EntitiesUser.  # noqa: E501


        :return: The imported_collections of this EntitiesUser.  # noqa: E501
        :rtype: list[LinkedItemInfo]
        """
        return self._imported_collections

    @imported_collections.setter
    def imported_collections(self, imported_collections):
        """Sets the imported_collections of this EntitiesUser.


        :param imported_collections: The imported_collections of this EntitiesUser.  # noqa: E501
        :type: list[LinkedItemInfo]
        """

        self._imported_collections = imported_collections

    @property
    def resolved_presentation_unique_key(self):
        """Gets the resolved_presentation_unique_key of this EntitiesUser.  # noqa: E501


        :return: The resolved_presentation_unique_key of this EntitiesUser.  # noqa: E501
        :rtype: str
        """
        return self._resolved_presentation_unique_key

    @resolved_presentation_unique_key.setter
    def resolved_presentation_unique_key(self, resolved_presentation_unique_key):
        """Sets the resolved_presentation_unique_key of this EntitiesUser.


        :param resolved_presentation_unique_key: The resolved_presentation_unique_key of this EntitiesUser.  # noqa: E501
        :type: str
        """

        self._resolved_presentation_unique_key = resolved_presentation_unique_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitiesUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitiesUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
