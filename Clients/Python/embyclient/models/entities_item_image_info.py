# coding: utf-8

"""
    Emby Server REST API (BETA)
"""

import pprint
import re  # noqa: F401

import six

class EntitiesItemImageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'type': 'ImageType',
        'orientation': 'DrawingImageOrientation',
        'date_modified': 'datetime',
        'width': 'int',
        'height': 'int'
    }

    attribute_map = {
        'path': 'Path',
        'type': 'Type',
        'orientation': 'Orientation',
        'date_modified': 'DateModified',
        'width': 'Width',
        'height': 'Height'
    }

    def __init__(self, path=None, type=None, orientation=None, date_modified=None, width=None, height=None):  # noqa: E501
        """EntitiesItemImageInfo - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._type = None
        self._orientation = None
        self._date_modified = None
        self._width = None
        self._height = None
        self.discriminator = None
        if path is not None:
            self.path = path
        if type is not None:
            self.type = type
        if orientation is not None:
            self.orientation = orientation
        if date_modified is not None:
            self.date_modified = date_modified
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height

    @property
    def path(self):
        """Gets the path of this EntitiesItemImageInfo.  # noqa: E501

        The path.  # noqa: E501

        :return: The path of this EntitiesItemImageInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EntitiesItemImageInfo.

        The path.  # noqa: E501

        :param path: The path of this EntitiesItemImageInfo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this EntitiesItemImageInfo.  # noqa: E501


        :return: The type of this EntitiesItemImageInfo.  # noqa: E501
        :rtype: ImageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntitiesItemImageInfo.


        :param type: The type of this EntitiesItemImageInfo.  # noqa: E501
        :type: ImageType
        """

        self._type = type

    @property
    def orientation(self):
        """Gets the orientation of this EntitiesItemImageInfo.  # noqa: E501


        :return: The orientation of this EntitiesItemImageInfo.  # noqa: E501
        :rtype: DrawingImageOrientation
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this EntitiesItemImageInfo.


        :param orientation: The orientation of this EntitiesItemImageInfo.  # noqa: E501
        :type: DrawingImageOrientation
        """

        self._orientation = orientation

    @property
    def date_modified(self):
        """Gets the date_modified of this EntitiesItemImageInfo.  # noqa: E501

        The date modified.  # noqa: E501

        :return: The date_modified of this EntitiesItemImageInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this EntitiesItemImageInfo.

        The date modified.  # noqa: E501

        :param date_modified: The date_modified of this EntitiesItemImageInfo.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def width(self):
        """Gets the width of this EntitiesItemImageInfo.  # noqa: E501


        :return: The width of this EntitiesItemImageInfo.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this EntitiesItemImageInfo.


        :param width: The width of this EntitiesItemImageInfo.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this EntitiesItemImageInfo.  # noqa: E501


        :return: The height of this EntitiesItemImageInfo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this EntitiesItemImageInfo.


        :param height: The height of this EntitiesItemImageInfo.  # noqa: E501
        :type: int
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitiesItemImageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitiesItemImageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
