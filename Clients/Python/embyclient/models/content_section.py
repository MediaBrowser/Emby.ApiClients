# coding: utf-8

"""
    Emby Server REST API (BETA)
"""

import pprint
import re  # noqa: F401

import six

class ContentSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'section_type': 'str',
        'collection_type': 'str',
        'view_type': 'str',
        'monitor': 'list[str]',
        'card_size_offset': 'int',
        'scroll_direction': 'ScrollDirection',
        'parent_item': 'BaseItemDto'
    }

    attribute_map = {
        'name': 'Name',
        'id': 'Id',
        'section_type': 'SectionType',
        'collection_type': 'CollectionType',
        'view_type': 'ViewType',
        'monitor': 'Monitor',
        'card_size_offset': 'CardSizeOffset',
        'scroll_direction': 'ScrollDirection',
        'parent_item': 'ParentItem'
    }

    def __init__(self, name=None, id=None, section_type=None, collection_type=None, view_type=None, monitor=None, card_size_offset=None, scroll_direction=None, parent_item=None):  # noqa: E501
        """ContentSection - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._section_type = None
        self._collection_type = None
        self._view_type = None
        self._monitor = None
        self._card_size_offset = None
        self._scroll_direction = None
        self._parent_item = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if section_type is not None:
            self.section_type = section_type
        if collection_type is not None:
            self.collection_type = collection_type
        if view_type is not None:
            self.view_type = view_type
        if monitor is not None:
            self.monitor = monitor
        if card_size_offset is not None:
            self.card_size_offset = card_size_offset
        if scroll_direction is not None:
            self.scroll_direction = scroll_direction
        if parent_item is not None:
            self.parent_item = parent_item

    @property
    def name(self):
        """Gets the name of this ContentSection.  # noqa: E501


        :return: The name of this ContentSection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentSection.


        :param name: The name of this ContentSection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ContentSection.  # noqa: E501


        :return: The id of this ContentSection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentSection.


        :param id: The id of this ContentSection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def section_type(self):
        """Gets the section_type of this ContentSection.  # noqa: E501


        :return: The section_type of this ContentSection.  # noqa: E501
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this ContentSection.


        :param section_type: The section_type of this ContentSection.  # noqa: E501
        :type: str
        """

        self._section_type = section_type

    @property
    def collection_type(self):
        """Gets the collection_type of this ContentSection.  # noqa: E501


        :return: The collection_type of this ContentSection.  # noqa: E501
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """Sets the collection_type of this ContentSection.


        :param collection_type: The collection_type of this ContentSection.  # noqa: E501
        :type: str
        """

        self._collection_type = collection_type

    @property
    def view_type(self):
        """Gets the view_type of this ContentSection.  # noqa: E501


        :return: The view_type of this ContentSection.  # noqa: E501
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """Sets the view_type of this ContentSection.


        :param view_type: The view_type of this ContentSection.  # noqa: E501
        :type: str
        """

        self._view_type = view_type

    @property
    def monitor(self):
        """Gets the monitor of this ContentSection.  # noqa: E501


        :return: The monitor of this ContentSection.  # noqa: E501
        :rtype: list[str]
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this ContentSection.


        :param monitor: The monitor of this ContentSection.  # noqa: E501
        :type: list[str]
        """

        self._monitor = monitor

    @property
    def card_size_offset(self):
        """Gets the card_size_offset of this ContentSection.  # noqa: E501


        :return: The card_size_offset of this ContentSection.  # noqa: E501
        :rtype: int
        """
        return self._card_size_offset

    @card_size_offset.setter
    def card_size_offset(self, card_size_offset):
        """Sets the card_size_offset of this ContentSection.


        :param card_size_offset: The card_size_offset of this ContentSection.  # noqa: E501
        :type: int
        """

        self._card_size_offset = card_size_offset

    @property
    def scroll_direction(self):
        """Gets the scroll_direction of this ContentSection.  # noqa: E501


        :return: The scroll_direction of this ContentSection.  # noqa: E501
        :rtype: ScrollDirection
        """
        return self._scroll_direction

    @scroll_direction.setter
    def scroll_direction(self, scroll_direction):
        """Sets the scroll_direction of this ContentSection.


        :param scroll_direction: The scroll_direction of this ContentSection.  # noqa: E501
        :type: ScrollDirection
        """

        self._scroll_direction = scroll_direction

    @property
    def parent_item(self):
        """Gets the parent_item of this ContentSection.  # noqa: E501


        :return: The parent_item of this ContentSection.  # noqa: E501
        :rtype: BaseItemDto
        """
        return self._parent_item

    @parent_item.setter
    def parent_item(self, parent_item):
        """Sets the parent_item of this ContentSection.


        :param parent_item: The parent_item of this ContentSection.  # noqa: E501
        :type: BaseItemDto
        """

        self._parent_item = parent_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
