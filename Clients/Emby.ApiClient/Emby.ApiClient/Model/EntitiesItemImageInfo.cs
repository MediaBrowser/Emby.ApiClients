// <copyright file="EntitiesItemImageInfo.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// EntitiesItemImageInfo.
    /// </summary>
    /// <seealso>MediaBrowser.Controller.Entities.ItemImageInfo</seealso>
    public partial class EntitiesItemImageInfo :  IEquatable<EntitiesItemImageInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesItemImageInfo" /> class.
        /// </summary>
        public EntitiesItemImageInfo()
        {
        }
        
        /// <summary>
        /// The path.
        /// </summary>
        /// <value>The Path.</value>
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <value>The Type.</value>
        public ImageType Type { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        /// <value>The Orientation.</value>
        public DrawingImageOrientation Orientation { get; set; }

        /// <summary>
        /// The date modified.
        /// </summary>
        /// <value>The DateModified.</value>
        public DateTimeOffset? DateModified { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        /// <value>The Width.</value>
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        /// <value>The Height.</value>
        public int? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntitiesItemImageInfo {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntitiesItemImageInfo);
        }

        /// <summary>
        /// Returns true if EntitiesItemImageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EntitiesItemImageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntitiesItemImageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    (this.Orientation != null &&
                    this.Orientation.Equals(input.Orientation))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Orientation != null)
                    hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                if (this.DateModified != null)
                    hashCode = hashCode * 59 + this.DateModified.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }
    }
}