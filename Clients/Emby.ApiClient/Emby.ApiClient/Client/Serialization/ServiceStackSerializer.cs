// <copyright file="ServiceStackSerializer.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>

// ReSharper disable HeuristicUnreachableCode
namespace Emby.ApiClient.Client.Serialization
{
    using RestSharp;
    using RestSharp.Serializers;
    using ServiceStack.Text;
    using System;
    using System.Globalization;
    using System.IO;
    using System.Net;
    using System.Threading.Tasks;

    /// <summary>
    /// Provides a wrapper around third party json serialization.
    /// </summary>
    public class ServiceStackSerializer : IRestSerializer, ISerializer, IDeserializer
    {
        /// <summary>Initializes a new instance of the <see cref="JsonSerializer"/> class.</summary>
        public ServiceStackSerializer()
        {
            this.Configure();
        }

        // ReSharper disable once AssignNullToNotNullAttribute
        public string Serialize(Parameter bodyParameter) => this.Serialize(bodyParameter.Value);

        public ISerializer   Serializer   => this;

        public IDeserializer Deserializer => this;

        public string[] AcceptedContentTypes => ContentType.JsonAccept;

        public ContentType ContentType { get; set; } = ContentType.Json;

        public SupportsContentType SupportsContentType
        {
            get
            {
                return contentType =>
                    {
                        return contentType.Value.Contains("json");
                    };
            }
        }

        public DataFormat DataFormat => DataFormat.Json;

        public string Serialize(object obj)
        {
            // ReSharper disable once ConditionIsAlwaysTrueOrFalse
            if (obj == null)
            {
                // ReSharper disable once HeuristicUnreachableCode
                return null;
            }

            return this.SerializeToString(obj);
        }

        public T Deserialize<T>(RestResponse response)
        {
            if (response.Content == null)
                throw new DeserializationException(response, new InvalidOperationException("Response content is null"));

            return this.DeserializeFromString<T>(response.Content);
        }

        /// <summary>Deserializes from stream.</summary>
        /// <typeparam name="T">The type.</typeparam>
        /// <param name="stream">The stream.</param>
        /// <returns>``0.</returns>
        /// <exception cref="System.ArgumentNullException">stream.</exception>
        public T DeserializeFromStream<T>(Stream stream)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromStream<T>(stream);
        }

        /// <summary>Deserializes from stream asynchronously.</summary>
        /// <typeparam name="T">The type.</typeparam>
        /// <param name="stream">The stream.</param>
        /// <returns>``0.</returns>
        public async Task<T> DeserializeFromStreamAsync<T>(Stream stream)
        {
            using (new StreamReader(stream))
            {
                return await ServiceStack.Text.JsonSerializer.DeserializeFromStreamAsync<T>(stream).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Deserializes from string.
        /// </summary>
        /// <typeparam name="T">The type.</typeparam>
        /// <param name="text">The text.</param>
        /// <returns>``0.</returns>
        /// <exception cref="System.ArgumentNullException">text.</exception>
        public T DeserializeFromString<T>(string text)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromString<T>(text);
        }

        /// <summary>
        /// Deserializes from stream.
        /// </summary>
        /// <param name="stream">The stream.</param>
        /// <param name="type">The type.</param>
        /// <returns>System.Object.</returns>
        /// <exception cref="System.ArgumentNullException">stream.</exception>
        public object DeserializeFromStream(Stream stream, Type type)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromStream(type, stream);
        }

        /// <summary>Deserializes from stream asynchronous.</summary>
        /// <param name="stream">The stream.</param>
        /// <param name="type">The type.</param>
        /// <returns>An object of the specified type.</returns>
        public Task<object> DeserializeFromStreamAsync(Stream stream, Type type)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromStreamAsync(type, stream);
        }

        /// <summary>
        /// Deserializes from string.
        /// </summary>
        /// <param name="json">The json.</param>
        /// <param name="type">The type.</param>
        /// <returns>System.Object.</returns>
        /// <exception cref="System.ArgumentNullException">json.</exception>
        public object DeserializeFromString(string json, Type type)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromString(json, type);
        }

        /// <summary>Deserializes from bytes.</summary>
        /// <param name="bytes">The bytes.</param>
        /// <param name="type">The type.</param>
        /// <returns>An object of the specified type.</returns>
        public object DeserializeFromBytes(byte[] bytes, Type type)
        {
            var encoding = JsConfig.UTF8Encoding;

            var readOnlySpan = encoding.GetString(bytes).AsSpan();

            return this.DeserializeFromSpan(readOnlySpan, type);
        }

        /// <summary>Deserializes from bytes.</summary>
        /// <typeparam name="T">The type.</typeparam>
        /// <param name="bytes">The bytes.</param>
        /// <returns>An object of type <typeparamref name="T"/>.</returns>
        public T DeserializeFromBytes<T>(byte[] bytes)
        {
            var encoding = JsConfig.UTF8Encoding;

            var readOnlySpan = encoding.GetString(bytes).AsSpan();

            return this.DeserializeFromSpan<T>(readOnlySpan);
        }

        /// <summary>
        /// Serializes to string.
        /// </summary>
        /// <param name="obj">The obj.</param>
        /// <returns>System.String.</returns>
        /// <exception cref="System.ArgumentNullException">obj.</exception>
        public string SerializeToString(object obj)
        {
            using (var writer = new StringWriter(CultureInfo.InvariantCulture))
            {
                SerializeToWriter(obj, writer);
                return writer.ToString();
            }
        }

        /// <summary>Serializes to string.</summary>
        /// <param name="obj">The obj.</param>
        /// <param name="options">The options.</param>
        /// <returns>System.String.</returns>
        /// <exception cref="System.ArgumentNullException">obj.</exception>
        public string SerializeToString(object obj, JsonSerializerOptions options)
        {
            using (CreateConfigScope(options))
            {
                return this.SerializeToString(obj);
            }
        }

        private static void SerializeToWriter(object obj, TextWriter writer)
        {
            // SS source code has inconsistent serialization
            // SerializeToStream uses StreamWriter, which inherits from TextWriter, which defaults to CurrentCulture
            // But SerializeToString uses StringWriter and ServiceStack passes in InvariantCulture in the constructor
            // So we normalize here for predicable behavior
            ServiceStack.Text.JsonSerializer.SerializeToWriter(obj, obj.GetType(), writer);
        }

        private static JsConfigScope CreateConfigScope(JsonSerializerOptions options)
        {
            var newScope = JsConfig.BeginScope();
            newScope.Indent = options.Indent;
            newScope.ExcludeTypeInfo = options.ExcludeTypeInfo;
            newScope.IncludeNullValues = options.IncludeNullValues;

            return newScope;
        }

        private T DeserializeFromSpan<T>(ReadOnlySpan<char> text)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromSpan<T>(text);
        }

        private object DeserializeFromSpan(ReadOnlySpan<char> json, Type type)
        {
            return ServiceStack.Text.JsonSerializer.DeserializeFromSpan(type, json);
        }

        /// <summary>
        /// Configures this instance.
        /// </summary>
        private void Configure()
        {
            JsConfig.DateHandler = DateHandler.ISO8601;
            JsConfig.ExcludeTypeInfo = true;
            JsConfig.IncludeNullValues = false;
            JsConfig.AlwaysUseUtc = true;
            JsConfig.AssumeUtc = true;

            JsConfig<Guid>.SerializeFn = this.SerializeGuid;
            JsConfig<DateTimeOffset>.SerializeFn = this.SerializeDateTimeOffset;
            JsConfig<DateTimeOffset?>.SerializeFn = this.SerializeNullableDateTimeOffset;
            JsConfig<IPAddress>.SerializeFn = this.SerializeIpAddress;

            JsConfig<ReadOnlyMemory<char>>.SerializeFn = this.SerializeReadOnlyMemoryChar;
            JsConfig<ReadOnlyMemory<char>>.RawDeserializeFn = this.DeserializReadOnlyMemoryChar;
        }

        private string SerializeReadOnlyMemoryChar(ReadOnlyMemory<char> value)
        {
            if (value.IsEmpty)
            {
                return null;
            }

            return value.ToString();
        }

        private ReadOnlyMemory<char> DeserializReadOnlyMemoryChar(string value)
        {
            if (value == null)
            {
                return null;
            }

            return value.AsMemory();
        }

        private string SerializeNullableDateTimeOffset(DateTimeOffset? value)
        {
            if (value.HasValue)
            {
                return this.SerializeDateTimeOffset(value.Value);
            }

            return null;
        }

        private string SerializeDateTimeOffset(DateTimeOffset value)
        {
            ////var result = value.UtcDateTime.ToString("o", CultureInfo.InvariantCulture);
            return value.UtcDateTime.ToString("o", CultureInfo.InvariantCulture);
        }

        private string SerializeIpAddress(IPAddress value)
        {
            return value.ToString();
        }

        private string SerializeGuid(Guid guid)
        {
            if (guid.Equals(Guid.Empty))
            {
                return null;
            }

            return guid.ToString("N");
        }
    }
}
