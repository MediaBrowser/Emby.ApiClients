// <copyright file="EmbyPasswordAuthenticator.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>

namespace Emby.ApiClient.Client.Authentication
{
    using Emby.ApiClient.Model;
    using RestSharp;
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Emby Authenticator for authentication with username and password.
    /// </summary>
    /// <remarks>See https://dev.emby.media/doc/restapi/User-Authentication.html.</remarks>
    public class EmbyPasswordAuthenticator : EmbyKnownTokenAuthenticator
    {
        private string token;
        private bool isLoginInProgess;

        public EmbyPasswordAuthenticator(EmbyAuthInfo authInfo, string userName, string password)
        : base(authInfo)
        {
            this.UserName = userName;
            this.Password = password;
        }

        public string UserName { get; }

        public string Password { get; }

        public override string Token => this.token;

        protected override ValueTask<Parameter> GetAuthenticationParameter()
        {
            var paramValue = this.AuthInfo.ToString(this.Token);
            var paramter = new HeaderParameter(KnownHeaders.Authorization, paramValue);

            return new ValueTask<Parameter>(paramter);
        }

        private async ValueTask LoginUser(IRestClient client)
        {
            if (this.isLoginInProgess)
            {
                return;
            }

            this.isLoginInProgess = true;

            try
            {
                var request = new RestRequest("/Users/AuthenticateByName", Method.Post);

                var payLoad = new AuthenticateUserByName { Username = this.UserName, Pw = this.Password };

                request.AddJsonBody(payLoad);
                request.AddHeader(KnownHeaders.Authorization, this.AuthInfo.ToString());
                ////request.AddHeader(KnownHeaders.Accept, "application/json");

                var authResult = await client.ExecuteAsync<AuthenticationAuthenticationResult>(request).ConfigureAwait(false);

                if (!authResult.IsSuccessful)
                {
                    throw new ApiException((int)authResult.StatusCode, authResult.StatusDescription, authResult.Content);
                }

                if (string.IsNullOrEmpty(authResult.Data?.AccessToken))
                {
                    throw new Exception("Authentication did not return a token");
                }

                this.token = authResult.Data.AccessToken;
            }
            finally
            {
                this.isLoginInProgess = false;
            }
        }

        public override async ValueTask Authenticate(IRestClient client, RestRequest request)
        {
            if (string.IsNullOrEmpty(this.token))
            {
                await this.LoginUser(client).ConfigureAwait(false);
            }

            await base.Authenticate(client, request);
        }
    }
}
